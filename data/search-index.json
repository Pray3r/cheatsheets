[
{
  "id": "cheatsheet-styles",
  "title": "Cheatsheet styles",
  "url": "/cheatsheet-styles",
  "category": "Others",
  "keywords": null,
  "content_html": "<h2 id=\"intro\">Intro</h2>\n\n<h2 class=\"-three-column\" id=\"variants\">Variants</h2>\n\n<h3 id=\"h2-sections\">H2 sections</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-one-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-two-column</code></td>\n      <td><em>(default)</em></td>\n    </tr>\n    <tr>\n      <td><code>-three-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-left-reference</code></td>\n      <td>3 columns<br /><em>(short first column)</em></td>\n    </tr>\n    <tr>\n      <td><code>-no-hide</code></td>\n      <td>Don’t hide H2</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#two-columns\">H2 sections</a></p>\n\n<h3 id=\"h3-sections\">H3 sections</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-prime</code></td>\n      <td>Highlight</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#h3-sections-1\">H3 sections</a></p>\n\n<h3 id=\"tables\">Tables</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-bold-first</code></td>\n      <td>Bold first column</td>\n    </tr>\n    <tr>\n      <td><code>-headers</code></td>\n      <td>Show headers</td>\n    </tr>\n    <tr>\n      <td><code>-left-align</code></td>\n      <td>Don’t right align last column</td>\n    </tr>\n    <tr>\n      <td><code>-mute-em</code></td>\n      <td>Lower opacity for italics</td>\n    </tr>\n    <tr>\n      <td><code>-no-wrap</code></td>\n      <td>Don’t wrap text</td>\n    </tr>\n    <tr>\n      <td><code>-shortcuts</code></td>\n      <td>Shortcut keys</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#tables-1\">Tables</a></p>\n\n<h3 id=\"code\">Code</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-box-chars</code></td>\n      <td>Less line height<br /><em>for box drawing chars</em></td>\n    </tr>\n    <tr>\n      <td><code>-setup</code></td>\n      <td>Gray background</td>\n    </tr>\n    <tr>\n      <td><code>-wrap</code></td>\n      <td>Enables line-wrapping</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#code-1\">Code</a></p>\n\n<h3 id=\"paragraphs\">Paragraphs</h3>\n\n<table class=\"-gray\">\n  <tbody>\n    <tr>\n      <td><code>-setup</code></td>\n      <td>Gray background</td>\n    </tr>\n    <tr>\n      <td><code>-crosslink</code></td>\n      <td>Has arrow on the link</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#paragraphs-1\">Paragraphs</a></p>\n\n<h3 id=\"lists\">Lists</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-also-see</code></td>\n      <td>Lighter background</td>\n    </tr>\n    <tr>\n      <td><code>-four-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-six-column</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#lists-1\">Lists</a></p>\n\n<h3 class=\"-prime\" id=\"adding-variants\">Adding variants</h3>\n\n<pre><code>## Section\n{: .-two-column}\n</code></pre>\n\n<p>Devhints uses Kramdown, and supports adding classes via Kramdown’s syntax.</p>\n\n<h2 class=\"-three-column\" id=\"h3-sections-1\">H3 sections</h2>\n\n<h3 id=\"supported\">Supported</h3>\n\n<p>Each section can have the following children:</p>\n\n<h4 id=\"white\">White</h4>\n\n<ul>\n  <li><code>pre</code></li>\n  <li><code>ul</code></li>\n  <li><code>table</code></li>\n</ul>\n\n<h4 id=\"gray\">Gray</h4>\n\n<ul>\n  <li><code>p</code></li>\n  <li><code>h4</code></li>\n</ul>\n\n<h3 class=\"-prime\" id=\"prime-section\">Prime section</h3>\n\n<p>This is a section with <code>{: .-prime}</code>. Notice the fancy highlight! Great for “getting started” kind of snippets.</p>\n\n<h3 id=\"h3-section\">H3 section</h3>\n\n<p>Every box is an H3 section. The box will encompass everything inside the body of the H3.</p>\n\n<p>This is a basic section with paragraphs in it.</p>\n\n<h2 class=\"-three-column\" id=\"code-1\">Code</h2>\n\n<h3 id=\"basic-code\">Basic code</h3>\n\n<pre><code class=\"language-js\">here.is(() =&gt; {\n  some.code()\n})\n</code></pre>\n\n<pre><code class=\"language-js\">here.is.some.more()\n</code></pre>\n\n<p>Code blocks can be placed one after the other.</p>\n\n<p>See: <a href=\"/\">Cheatsheets</a></p>\n\n<h3 id=\"code-with-headings\">Code with headings</h3>\n\n<h4 class=\"-file\" id=\"indexjs\">index.js</h4>\n\n<pre><code class=\"language-js\">here.is(() =&gt; {\n  some.code()\n})\n</code></pre>\n\n<h4 class=\"-file\" id=\"otherjs\">other.js</h4>\n\n<pre><code class=\"language-js\">here.is.some.more()\n</code></pre>\n\n<p>Code blocks can have headings.</p>\n\n<h3 id=\"highlighted-lines\">Highlighted lines</h3>\n\n<pre data-line=\"3\"><code class=\"language-js\">app.start(() =&gt; {\n  const port = app.server.port\n  console.log(`Started at ${port}`)\n})\n</code></pre>\n\n<p>Add <code>{: data-line=\"3\"}</code> to add line highlights.</p>\n\n<h3 id=\"multiple-highlights\">Multiple highlights</h3>\n\n<pre data-line=\"2,3\"><code class=\"language-js\">app.start(() =&gt; {\n  const port = app.server.port\n  console.log(`Started at ${port}`)\n})\n</code></pre>\n\n<p>Add <code>{: data-line=\"2,3\"}</code> to add multiple line highlights.</p>\n\n<h3 id=\"setup-blocks\">Setup blocks</h3>\n\n<pre class=\"-setup\"><code class=\"language-js\">import React from 'react'\n</code></pre>\n\n<pre><code class=\"language-js\">class Hello extends React.Component {\n  render () {\n    return &lt;span&gt;Hello&lt;/span&gt;\n  }\n}\n</code></pre>\n\n<p>Add <code>{: .-setup}</code> to a <code>pre</code> or <code>table</code> or <code>ul</code>.</p>\n\n<h3 id=\"long-lines\">Long lines</h3>\n\n<pre><code class=\"language-js\">function createNode(nodeName: string, options: { key: string }) {\n  return true\n}\n</code></pre>\n\n<p>Long lines will have scrollbars.</p>\n\n<h3 id=\"line-wrapping\">Line wrapping</h3>\n\n<pre class=\"-wrap\"><code class=\"language-js\">&lt;script&gt;(function(d,s){if(window.Promise&amp;&amp;[].includes&amp;&amp;Object.assign&amp;&amp;window.Map)return;var js,sc=d.getElementsByTagName(s)[0];js=d.createElement(s);js.src='https://cdn.polyfill.io/v2/polyfill.min.js';sc.parentNode.insertBefore(js, sc);}(document,'script'))&lt;/script&gt;\n</code></pre>\n\n<p>Add <code>-wrap</code> to wrap long lines.</p>\n\n<h2 class=\"-three-column\" id=\"lists-1\">Lists</h2>\n\n<h3 id=\"lists-2\">Lists</h3>\n\n<ul>\n  <li>This is</li>\n  <li>a list</li>\n  <li>with a few items</li>\n</ul>\n\n<p>Here’s an extra paragraph after the list.</p>\n\n<h3 id=\"lists-with-headings\">Lists with headings</h3>\n\n<h4 id=\"part-1\">Part 1</h4>\n\n<ul>\n  <li><code>createElement()</code></li>\n  <li><code>componentDidMount()</code></li>\n  <li><code>componentWillUnmount()</code></li>\n</ul>\n\n<h4 id=\"part-2\">Part 2</h4>\n\n<ul>\n  <li><code>shouldComponentUpdate()</code></li>\n  <li><code>componentWillReceiveProps()</code></li>\n</ul>\n\n<p>Here’s an extra paragraph after the list.</p>\n\n<h2 class=\"-one-column\" id=\"list-columns\">List columns</h2>\n\n<h3 id=\"six-columns\">Six columns</h3>\n\n<ul class=\"-six-column\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n  <li>Eleven</li>\n</ul>\n\n<p>Add <code>{: .-six-column}</code> to make large lists.</p>\n\n<h3 id=\"four-columns\">Four columns</h3>\n\n<ul class=\"-four-column\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n  <li>Eleven</li>\n</ul>\n\n<p>Add <code>{: .-four-column}</code> to make large lists.</p>\n\n<h3 id=\"also-see\">Also see</h3>\n\n<ul class=\"-also-see\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n</ul>\n\n<p>Add <code>{: .-also-see}</code>.</p>\n\n<h2 class=\"-three-column\" id=\"paragraphs-1\">Paragraphs</h2>\n\n<h3 id=\"basic-paragraphs\">Basic paragraphs</h3>\n\n<p>This is a basic section with paragraphs in it. When paragraphs are the first elements in an H3 section’s body, they appear as white.</p>\n\n<h3 id=\"basic-paragraphs-1\">Basic paragraphs</h3>\n\n<pre><code>···\n</code></pre>\n\n<p>When paragraphs appear after <code>pre</code>/<code>table</code>/<code>ul</code>, they appear with a gray background.</p>\n\n<h3 id=\"preludes\">Preludes</h3>\n\n<p class=\"-setup\">Here’s a prelude paragraph. Add <code>{: .-setup}</code> to make paragraphs appear with a gray background.</p>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"crosslink\">Crosslink</h3>\n\n<p>Add <code>{: .-crosslink}</code> to make big loud external links:</p>\n\n<pre><code>···\n</code></pre>\n\n<p class=\"-crosslink\"><a href=\"/\">Home</a></p>\n\n<h2 class=\"-three-column\" id=\"tables-1\">Tables</h2>\n\n<h3 id=\"basic-table\">Basic table</h3>\n\n<h4 id=\"date\">Date</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Example</th>\n      <th>Output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>%m/%d/%Y</code></td>\n      <td><code>06/05/2013</code></td>\n    </tr>\n    <tr>\n      <td><code>%A, %B %e, %Y</code></td>\n      <td><code>Sunday, June 5, 2013</code></td>\n    </tr>\n    <tr>\n      <td><code>%b %e %a</code></td>\n      <td><code>Jun 5 Sun</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"time\">Time</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Example</th>\n      <th>Output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>%H:%M</code></td>\n      <td><code>23:05</code></td>\n    </tr>\n    <tr>\n      <td><code>%I:%M %p</code></td>\n      <td><code>11:05 PM</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>This is a basic table with h4’s.</p>\n\n<h3 id=\"shortcuts\">Shortcuts</h3>\n\n<table class=\"-shortcuts\">\n  <tbody>\n    <tr>\n      <td><code>V</code></td>\n      <td>Vector</td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n      <td>Pencil</td>\n    </tr>\n    <tr>\n      <td><code>T</code></td>\n      <td>Text</td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n      <td>Line</td>\n    </tr>\n    <tr>\n      <td><code>R</code></td>\n      <td>Rectangle</td>\n    </tr>\n    <tr>\n      <td><code>O</code></td>\n      <td>Oval</td>\n    </tr>\n    <tr>\n      <td><code>U</code></td>\n      <td>Rounded</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Add <code>{: .-shortcuts}</code> to tables.</p>\n\n<h3 id=\"with-headers\">With headers</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Prefix</th>\n      <th>Example</th>\n      <th>What</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>//</code></td>\n      <td><code>//hr[@class='edge']</code></td>\n      <td>Anywhere</td>\n    </tr>\n    <tr>\n      <td><code>./</code></td>\n      <td><code>./a</code></td>\n      <td>Relative</td>\n    </tr>\n    <tr>\n      <td><code>/</code></td>\n      <td><code>/html/body/div</code></td>\n      <td>Root</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Add <code>{: .-headers}</code> to add headers.</p>\n\n<h2 id=\"two-columns\">Two columns</h2>\n\n<h3 id=\"one\">One</h3>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"two\">Two</h3>\n\n<pre><code>···\n</code></pre>\n\n<h2 class=\"-left-reference\" id=\"left-reference\">Left reference</h2>\n\n<h3 id=\"one-1\">One</h3>\n\n<pre><code>···\n···\n···\n···\n···\n···\n···\n···\n</code></pre>\n\n<h3 id=\"two-1\">Two</h3>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"three\">Three</h3>\n\n<pre><code>···\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"one-column\">One column</h2>\n\n<h3 id=\"one-2\">One</h3>\n\n<pre><code>···\n</code></pre>",
  "intro_html": "<p>This is a reference of styles that you can use on Pray3r’s cheatsheets. How\nmeta!\nYou can refer to this when contributing your own cheatsheets to the <a href=\"https://github.com/pray3r/cheatsheets/\">GitHub repo</a>.</p>",
  "description_html": "",
  "tags": ["WIP"],
  "updated": "2017-09-22"
},{
  "id": "docker-compose",
  "title": "docker-compose",
  "url": "/docker-compose",
  "category": "Docker",
  "keywords": null,
  "content_html": "<h3 id=\"basic-example\">Basic example</h3>\n\n<pre><code class=\"language-yaml\"># docker-compose.yml\nversion: '2'\n\nservices:\n  web:\n    build: .\n    # build from Dockerfile\n    context: ./Path\n    dockerfile: Dockerfile\n    ports:\n     - \"5000:5000\"\n    volumes:\n     - .:/code\n  redis:\n    image: redis\n</code></pre>\n\n<h3 id=\"commands\">Commands</h3>\n\n<pre><code class=\"language-sh\">docker-compose start\ndocker-compose stop\n</code></pre>\n\n<pre><code class=\"language-sh\">docker-compose pause\ndocker-compose unpause\n</code></pre>\n\n<pre><code class=\"language-sh\">docker-compose ps\ndocker-compose up\ndocker-compose down\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"reference\">Reference</h2>\n\n<h3 id=\"building\">Building</h3>\n\n<pre><code class=\"language-yaml\">web:\n  # build from Dockerfile\n  build: .\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # build from custom Dockerfile\n  build:\n    context: ./dir\n    dockerfile: Dockerfile.dev\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # build from image\n  image: ubuntu\n  image: ubuntu:14.04\n  image: tutum/influxdb\n  image: example-registry:4000/postgresql\n  image: a4bc65fd\n</code></pre>\n\n<h3 id=\"ports\">Ports</h3>\n\n<pre><code class=\"language-yaml\">  ports:\n    - \"3000\"\n    - \"8000:80\"  # guest:host\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # expose ports to linked services (not to host)\n  expose: [\"3000\"]\n</code></pre>\n\n<h3 id=\"commands-1\">Commands</h3>\n\n<pre><code class=\"language-yaml\">  # command to execute\n  command: bundle exec thin -p 3000\n  command: [bundle, exec, thin, -p, 3000]\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # override the entrypoint\n  entrypoint: /app/start.sh\n  entrypoint: [php, -d, vendor/bin/phpunit]\n</code></pre>\n\n<h3 id=\"environment-variables\">Environment variables</h3>\n\n<pre><code class=\"language-yaml\">  # environment vars\n  environment:\n    RACK_ENV: development\n  environment:\n    - RACK_ENV=development\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # environment vars from file\n  env_file: .env\n  env_file: [.env, .development.env]\n</code></pre>\n\n<h3 id=\"dependencies\">Dependencies</h3>\n\n<pre><code class=\"language-yaml\">  # makes the `db` service available as the hostname `database`\n  # (implies depends_on)\n  links:\n    - db:database\n    - redis\n</code></pre>\n\n<pre><code class=\"language-yaml\">  # make sure `db` is alive before starting\n  depends_on:\n    - db\n</code></pre>\n\n<h3 id=\"other-options\">Other options</h3>\n\n<pre><code class=\"language-yaml\">  # make this service extend another\n  extends:\n    file: common.yml  # optional\n    service: webapp\n</code></pre>\n\n<pre><code class=\"language-yaml\">  volumes:\n    - /var/lib/mysql\n    - ./_data:/var/lib/mysql\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"advanced-features\">Advanced features</h2>\n\n<h3 id=\"labels\">Labels</h3>\n\n<pre><code class=\"language-yaml\">services:\n  web:\n    labels:\n      com.example.description: \"Accounting web app\"\n</code></pre>\n\n<h3 id=\"dns-servers\">DNS servers</h3>\n\n<pre><code class=\"language-yaml\">services:\n  web:\n    dns: 8.8.8.8\n    dns:\n      - 8.8.8.8\n      - 8.8.4.4\n</code></pre>\n\n<h3 id=\"devices\">Devices</h3>\n\n<pre><code class=\"language-yaml\">services:\n  web:\n    devices:\n    - \"/dev/ttyUSB0:/dev/ttyUSB0\"\n</code></pre>\n\n<h3 id=\"external-links\">External links</h3>\n\n<pre><code class=\"language-yaml\">services:\n  web:\n    external_links:\n      - redis_1\n      - project_db_1:mysql\n</code></pre>\n\n<h3 id=\"hosts\">Hosts</h3>\n\n<pre><code class=\"language-yaml\">services:\n  web:\n    extra_hosts:\n      - \"somehost:192.168.1.100\"\n</code></pre>\n\n<h3 id=\"network\">Network</h3>\n\n<pre><code class=\"language-yaml\"># creates a custom network called `frontend`\nnetworks:\n  frontend:\n</code></pre>\n\n<h3 id=\"external-network\">External network</h3>\n\n<pre><code class=\"language-yaml\"># join a pre-existing network\nnetworks:\n  default:\n    external:\n      name: frontend\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2018-06-26"
},{
  "id": "docker",
  "title": "Docker CLI",
  "url": "/docker",
  "category": "Docker",
  "keywords": null,
  "content_html": "<h2 id=\"manage-images\">Manage images</h2>\n\n<h3 id=\"docker-build\"><code>docker build</code></h3>\n\n<pre><code class=\"language-yml\">docker build [options] .\n  -t \"app/container_name\"    # name\n</code></pre>\n\n<p>Create an <code>image</code> from a Dockerfile.</p>\n\n<h3 id=\"docker-run\"><code>docker run</code></h3>\n\n<pre><code class=\"language-yml\">docker run [options] IMAGE\n  # see `docker create` for options\n</code></pre>\n\n<p>Run a command in an <code>image</code>.</p>\n\n<h2 id=\"manage-containers\">Manage containers</h2>\n\n<h3 id=\"docker-create\"><code>docker create</code></h3>\n\n<pre><code class=\"language-yml\">docker create [options] IMAGE\n  -a, --attach               # attach stdout/err\n  -i, --interactive          # attach stdin (interactive)\n  -t, --tty                  # pseudo-tty\n      --name NAME            # name your image\n  -p, --publish 5000:5000    # port map\n      --expose 5432          # expose a port to linked containers\n  -P, --publish-all          # publish all ports\n      --link container:alias # linking\n  -v, --volume `pwd`:/app    # mount (absolute paths needed)\n  -e, --env NAME=hello       # env vars\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>$ docker create --name app_redis_1 \\\n  --expose 6379 \\\n  redis:3.0.2\n</code></pre>\n\n<p>Create a <code>container</code> from an <code>image</code>.</p>\n\n<h3 id=\"docker-exec\"><code>docker exec</code></h3>\n\n<pre><code class=\"language-yml\">docker exec [options] CONTAINER COMMAND\n  -d, --detach        # run in background\n  -i, --interactive   # stdin\n  -t, --tty           # interactive\n</code></pre>\n\n<h4 id=\"example-1\">Example</h4>\n\n<pre><code>$ docker exec app_web_1 tail logs/development.log\n$ docker exec -t -i app_web_1 rails c\n</code></pre>\n\n<p>Run commands in a <code>container</code>.</p>\n\n<h3 id=\"docker-start\"><code>docker start</code></h3>\n\n<pre><code class=\"language-yml\">docker start [options] CONTAINER\n  -a, --attach        # attach stdout/err\n  -i, --interactive   # attach stdin\n\ndocker stop [options] CONTAINER\n</code></pre>\n\n<p>Start/stop a <code>container</code>.</p>\n\n<h3 id=\"docker-ps\"><code>docker ps</code></h3>\n\n<pre><code>$ docker ps\n$ docker ps -a\n$ docker kill $ID\n</code></pre>\n\n<p>Manage <code>container</code>s using ps/kill.</p>\n\n<h2 id=\"images\">Images</h2>\n\n<h3 id=\"docker-images\"><code>docker images</code></h3>\n\n<pre><code class=\"language-sh\">$ docker images\n  REPOSITORY   TAG        ID\n  ubuntu       12.10      b750fe78269d\n  me/myapp     latest     7b2431a8d968\n</code></pre>\n\n<pre><code class=\"language-sh\">$ docker images -a   # also show intermediate\n</code></pre>\n\n<p>Manages <code>image</code>s.</p>\n\n<h3 id=\"docker-rmi\"><code>docker rmi</code></h3>\n\n<pre><code class=\"language-yml\">docker rmi b750fe78269d\n</code></pre>\n\n<p>Deletes <code>image</code>s.</p>\n\n<h2 id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"http://www.docker.io/gettingstarted/\">Getting Started</a> <em>(docker.io)</em></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "dockerfile",
  "title": "Dockerfile",
  "url": "/dockerfile",
  "category": "Docker",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"reference\">Reference</h2>\n\n<h3 id=\"inheritance\">Inheritance</h3>\n\n<pre><code class=\"language-docker\">FROM ruby:2.2.2\n</code></pre>\n\n<h3 id=\"variables\">Variables</h3>\n\n<pre><code class=\"language-docker\">ENV APP_HOME /myapp\nRUN mkdir $APP_HOME\n</code></pre>\n\n<h3 id=\"initialization\">Initialization</h3>\n\n<pre><code class=\"language-docker\">RUN bundle install\n</code></pre>\n\n<pre><code class=\"language-docker\">WORKDIR /myapp\n</code></pre>\n\n<pre><code class=\"language-docker\">VOLUME [\"/data\"]\n# Specification for mount point\n</code></pre>\n\n<pre><code class=\"language-docker\">ADD file.xyz /file.xyz\nCOPY --chown=user:group host_file.xyz /path/container_file.xyz\n</code></pre>\n\n<h3 id=\"onbuild\">Onbuild</h3>\n\n<pre><code class=\"language-docker\">ONBUILD RUN bundle install\n# when used with another file\n</code></pre>\n\n<h3 id=\"commands\">Commands</h3>\n\n<pre><code class=\"language-docker\">EXPOSE 5900\nCMD    [\"bundle\", \"exec\", \"rails\", \"server\"]\n</code></pre>\n\n<h3 id=\"entrypoint\">Entrypoint</h3>\n\n<pre><code class=\"language-docker\">ENTRYPOINT [\"executable\", \"param1\", \"param2\"]\nENTRYPOINT command param1 param2\n</code></pre>\n\n<p>Configures a container that will run as an executable.</p>\n\n<pre><code class=\"language-docker\">ENTRYPOINT exec top -b\n</code></pre>\n\n<p>This will use shell processing to substitute shell variables, and will ignore any <code>CMD</code> or <code>docker run</code> command line arguments.</p>\n\n<h3 id=\"metadata\">Metadata</h3>\n\n<pre><code class=\"language-docker\">LABEL version=\"1.0\"\n</code></pre>\n\n<pre><code class=\"language-docker\">LABEL \"com.example.vendor\"=\"ACME Incorporated\"\nLABEL com.example.label-with-value=\"foo\"\n</code></pre>\n\n<pre><code class=\"language-docker\">LABEL description=\"This text illustrates \\\nthat label-values can span multiple lines.\"\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"see-also\">See also</h2>\n\n<ul>\n  <li><a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2018-03-17"
},{
  "id": "git-branch",
  "title": "Git branches",
  "url": "/git-branch",
  "category": "Git",
  "keywords": null,
  "content_html": "<h2 class=\"-three-column\" id=\"working-with-branches\">Working with branches</h2>\n\n<h3 id=\"creating\">Creating</h3>\n\n<pre><code class=\"language-bash\">git checkout -b $branchname\ngit push origin $branchname --set-upstream\n</code></pre>\n\n<p>Creates a new branch locally then pushes it.</p>\n\n<h3 id=\"getting-from-remote\">Getting from remote</h3>\n\n<pre><code class=\"language-bash\">git fetch origin\ngit checkout --track origin/$branchname\n</code></pre>\n\n<p>Gets a branch in a remote.</p>\n\n<h3 id=\"delete-local-remote-tracking-branches\">Delete local remote-tracking branches</h3>\n\n<pre><code class=\"language-bash\">git remote prune origin\n</code></pre>\n\n<p>Deletes <code>origin/*</code> branches in your local copy. Doesn’t affect the remote.</p>\n\n<h3 id=\"list-merged-branches\">List merged branches</h3>\n\n<pre><code class=\"language-bash\">git branch -a --merged\n</code></pre>\n\n<p>List outdated branches that have been merged into the current one.</p>\n\n<h3 id=\"delete-remote-branch\">Delete remote branch</h3>\n\n<pre><code class=\"language-bash\">git push origin :$branchname\n</code></pre>\n\n<p>Works for tags, too!</p>\n\n<h3 id=\"get-current-sha1\">Get current sha1</h3>\n\n<pre><code class=\"language-bash\">git show-ref HEAD -s\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2017-09-20"
},{
  "id": "git-tricks",
  "title": "Git tricks",
  "url": "/git-tricks",
  "category": "Git",
  "keywords": null,
  "content_html": "<h2 id=\"refs\">Refs</h2>\n\n<pre><code>HEAD^       # 1 commit before head\nHEAD^^      # 2 commits before head\nHEAD~5      # 5 commits before head\n</code></pre>\n\n<h2 id=\"branches\">Branches</h2>\n\n<pre><code># create a new branch\n  git checkout -b $branchname\n  git push origin $branchname --set-upstream\n\n# get a remote branch\n  git fetch origin\n  git checkout --track origin/$branchname\n\n# delete local remote-tracking branches (lol)\n  git remote prune origin\n\n# list merged branches\n  git branch -a --merged\n\n# delete remote branch\n  git push origin :$branchname\n  \n# go back to previous branch\n  git checkout -\n</code></pre>\n\n<h2 id=\"collaboration\">Collaboration</h2>\n\n<pre><code># Rebase your changes on top of the remote master\n  git pull --rebase upstream master\n  \n# Squash multiple commits into one for a cleaner git log\n# (on the following screen change the word pick to either 'f' or 's')\n  git rebase -i $commit_ref\n</code></pre>\n\n<h2 id=\"submodules\">Submodules</h2>\n\n<pre><code># Import .gitmodules\n  git submodule init\n\n# Clone missing submodules, and checkout commits\n  git submodule update --init --recursive\n\n# Update remote URLs in .gitmodules\n# (Use when you changed remotes in submodules)\n  git submodule sync\n</code></pre>\n\n<h2 id=\"diff\">Diff</h2>\n\n<h3 id=\"diff-with-stats\">Diff with stats</h3>\n\n<pre><code>git diff --stat\napp/a.txt    | 2 +-\napp/b.txt    | 8 ++----\n2 files changed, 10 insertions(+), 84 deletions(-)\n</code></pre>\n\n<h3 id=\"just-filenames\">Just filenames</h3>\n\n<pre><code>git diff --summary\n</code></pre>\n\n<h2 id=\"log-options\">Log options</h2>\n\n<pre><code>--oneline\n  e11e9f9 Commit message here\n\n--decorate\n  shows \"(origin/master)\"\n\n--graph\n  shows graph lines\n\n--date=relative\n  \"2 hours ago\"\n</code></pre>\n\n<h2 id=\"misc\">Misc</h2>\n\n<h3 id=\"cherry-pick\">Cherry pick</h3>\n\n<pre><code>git rebase 76acada^\n</code></pre>\n\n<h3 id=\"misc-1\">Misc</h3>\n\n<pre><code># get current sha1 (?)\n  git show-ref HEAD -s\n\n# show single commit info\n  git log -1 f5a960b5\n\n# Go back up to root directory\n  cd \"$(git rev-parse --show-top-level)\"\n</code></pre>\n\n<h2 id=\"short-log\">Short log</h2>\n\n<pre><code> $ git shortlog\n $ git shortlog HEAD~20..    # last 20 commits\n\n James Dean (1):\n     Commit here\n     Commit there\n\n Frank Sinatra (5):\n     Another commit\n     This other commit\n</code></pre>\n\n<h2 id=\"bisect\">Bisect</h2>\n\n<pre><code>git bisect start HEAD HEAD~6\ngit bisect run npm test\ngit checkout refs/bisect/bad   # this is where it screwed up\ngit bisect reset\n</code></pre>\n\n<h3 id=\"manual-bisection\">Manual bisection</h3>\n\n<pre><code>git bisect start\ngit bisect good   # current version is good\n\ngit checkout HEAD~8\nnpm test          # see if it's good\ngit bisect bad    # current version is bad\n\ngit bisect reset  # abort\n</code></pre>\n\n<h2 id=\"searching\">Searching</h2>\n\n<pre><code>git log --grep=\"fixes things\"  # search in commit messages\ngit log -S\"window.alert\"       # search in code\ngit log -G\"foo.*\"              # search in code (regex)\n</code></pre>\n\n<h2 id=\"gpg-signing\">GPG Signing</h2>\n\n<pre><code>git config set user.signingkey &lt;GPG KEY ID&gt;       # Sets GPG key to use for signing\n\ngit commit -m \"Implement feature Y\" --gpg-sign    # Or -S, GPG signs commit\n\ngit config set commit.gpgsign true                # Sign commits by default\ngit commit -m \"Implement feature Y\" --no-gpg-sign # Do not sign\n</code></pre>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "kernel-heap-spray-structure",
  "title": "heap spray structure",
  "url": "/kernel-heap-spray-structure",
  "category": "Linux Kernel Exploitation",
  "keywords": null,
  "content_html": "<h3 id=\"setxattr\"><code>setxattr</code></h3>\n<pre><code class=\"language-yml\">setxattr + userfaultfd\n(TODO)\n</code></pre>\n\n<h3 id=\"sendmsg\"><code>sendmsg</code></h3>\n<pre><code class=\"language-yml\">(TODO)\n</code></pre>\n\n<h3 id=\"msg_msg\"><code>msg_msg</code></h3>\n<pre><code class=\"language-yml\">(TODO)\n</code></pre>\n\n<h2 id=\"reference\">Reference</h2>\n<ul>\n  <li><a href=\"#\">#</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2021-04-22"
},{
  "id": "kubernetes-kubectl",
  "title": "kubectl",
  "url": "/kubernetes-kubectl",
  "category": "Kubernetes",
  "keywords": null,
  "content_html": "<h2 id=\"基本命令\">基本命令</h2>\n\n<h3 class=\"-three-column\" id=\"运行pod\">运行pod</h3>\n\n<h4 class=\"-prime\" id=\"kubectl-run\">kubectl run</h4>\n\n<p>如何运行一个 nginx Deployment 并将其暴露出来？ 查看 <a href=\"https://kubernetes.io/docs/user-guide/kubectl/#run\">kubectl run</a>。</p>\n\n<pre><code class=\"language-bash\"># start the pod running nginx\n$ kubectl run --image=nginx nginx-app --port=80 --env=\"DOMAIN=cluster\"\ndeployment \"nginx-app\" created\n</code></pre>\n\n<h3 id=\"暴露服务\">暴露服务</h3>\n\n<h4 id=\"kubectl-expose\">kubectl expose</h4>\n\n<pre><code class=\"language-bash\"># expose a port through with a service\n$ kubectl expose deployment nginx-app --port=80 --name=nginx-http\nservice \"nginx-http\" exposed\n</code></pre>\n\n<p>在 kubectl 命令中，我们创建了一个 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment\">Deployment</a>，这将保证有 N 个运行 nginx 的 pod（N 代表 spec 中声明的 replica 数，默认为 1）。我们还创建了一个 <a href=\"https://kubernetes.io/docs/user-guide/services\">service</a>，使用 selector 匹配具有相应的 selector 的 Deployment。查看 <a href=\"https://kubernetes.io/docs/user-guide/quick-start\">快速开始</a> 获取更多信息。</p>\n\n<p>默认情况下镜像会在后台运行，与<code>docker run -d ...</code> 类似，如果您想在前台运行，使用：</p>\n\n<pre><code class=\"language-bash\">kubectl run [-i] [--tty] --attach &lt;name&gt; --image=&lt;image&gt;\n</code></pre>\n\n<h3 id=\"查看服务\">查看服务</h3>\n\n<h4 id=\"kubectl-get\">kubectl get</h4>\n\n<p>如何列出哪些正在运行？查看 <a href=\"https://kubernetes.io/docs/user-guide/kubectl/#get\">kubectl get</a>。</p>\n\n<pre><code class=\"language-bash\">$ kubectl get po\nNAME              READY     STATUS    RESTARTS   AGE\nnginx-app-5jyvm   1/1       Running   0          1h\n</code></pre>\n\n<p>如何连接到已经运行在容器中的进程？查看 <a href=\"https://kubernetes.io/docs/user-guide/kubectl/#attach\">kubectl attach</a>。</p>\n\n<p>使用 kubectl 命令：</p>\n\n<pre><code class=\"language-bash\">$ kubectl get pods\nNAME              READY     STATUS    RESTARTS   AGE\nnginx-app-5jyvm   1/1       Running   0          10m\n$ kubectl attach -it nginx-app-5jyvm\n...\n</code></pre>\n\n<h2 id=\"高级命令\">高级命令</h2>\n\n<h3 class=\"-three-column\" id=\"与容器交互\">与容器交互</h3>\n\n<h4 id=\"kubectl-exec\">kubectl exec</h4>\n\n<pre><code class=\"language-bash\">$ kubectl get po\nNAME              READY     STATUS    RESTARTS   AGE\nnginx-app-5jyvm   1/1       Running   0          10m\n$ kubectl exec nginx-app-5jyvm -- cat /etc/hostname\nnginx-app-5jyvm\n</code></pre>\n\n<p>执行交互式命令怎么办？</p>\n\n<pre><code class=\"language-bash\">$ kubectl exec -ti nginx-app-5jyvm -- /bin/sh      \n# exit\n</code></pre>\n\n<p>更多信息请查看 <a href=\"https://kubernetes.io/docs/tasks/kubectl/get-shell-running-container\">获取运行中容器的 Shell 环境</a>。</p>\n\n<h3 id=\"查看日志\">查看日志</h3>\n\n<p>如何查看运行中进程的 stdout/stderr？查看 <a href=\"https://kubernetes.io/docs/user-guide/kubectl/#logs\">kubectl logs</a>。</p>\n\n<h4 id=\"kubectl-logs\">kubectl logs</h4>\n\n<pre><code class=\"language-bash\">$ kubectl logs -f nginx-app-zibvs\n10.240.63.110 - - [14/Jul/2015:01:09:01 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.26.0\" \"-\"\n10.240.63.110 - - [14/Jul/2015:01:09:02 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.26.0\" \"-\"\n</code></pre>\n\n<p>现在是时候提一下 pod 和容器之间的细微差别了；默认情况下如果 pod 中的进程退出 pod 也不会终止，相反它将会重启该进程。这类似于 docker run 时的 <code>--restart=always</code> 选项， 这是主要差别。在 docker 中，进程的每个调用的输出都是被连接起来的，但是对于 kubernetes，每个调用都是分开的。要查看以前在 kubernetes 中执行的输出，请执行以下操作：</p>\n\n<pre><code class=\"language-bash\">$ kubectl logs --previous nginx-app-zibvs\n10.240.63.110 - - [14/Jul/2015:01:09:01 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.26.0\" \"-\"\n10.240.63.110 - - [14/Jul/2015:01:09:02 +0000] \"GET / HTTP/1.1\" 200 612 \"-\" \"curl/7.26.0\" \"-\"\n</code></pre>\n\n<p>查看 <a href=\"https://kubernetes.io/docs/concepts/cluster-administration/logging\">记录和监控集群活动</a> 获取更多信息。</p>\n\n<h3 id=\"删除pod\">删除pod</h3>\n\n<p>如何停止和删除运行中的进程？查看 <a href=\"https://kubernetes.io/docs/user-guide/kubectl/#delete\">kubectl delete</a>。</p>\n\n<h4 id=\"kubectl-delete\">kubectl delete</h4>\n\n<pre><code class=\"language-bash\">$ kubectl get deployment nginx-app\nNAME        DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx-app   1         1         1            1           2m\n$ kubectl get po -l run=nginx-app\nNAME                         READY     STATUS    RESTARTS   AGE\nnginx-app-2883164633-aklf7   1/1       Running   0          2m\n$ kubectl delete deployment nginx-app\ndeployment \"nginx-app\" deleted\n$ kubectl get po -l run=nginx-app\n# Return nothing\n</code></pre>\n\n<p>请注意，我们不直接删除 pod。使用 kubectl 命令，我们要删除拥有该 pod 的 Deployment。如果我们直接删除pod，Deployment 将会重新创建该 pod。</p>\n\n<h3 id=\"强制删除pod\">强制删除pod</h3>\n\n<pre><code class=\"language-bash\">kubectl delete pod $POD_ID --grace-period=0 --force\n</code></pre>\n\n<p>将Pod的优雅终止时间设置为0，并强制删除。</p>\n\n<h2 id=\"运维管理\">运维管理</h2>\n\n<h3 id=\"下节点\">下节点</h3>\n\n<p>排除节点上的容器，重新调度到其他的节点上。</p>\n\n<pre><code class=\"language-bash\">kubectl drain $NODE_NAME\n</code></pre>\n\n<h3 id=\"禁止调度\">禁止调度</h3>\n\n<p>标记pod禁止调度到该节点上。</p>\n\n<pre><code class=\"language-bash\">kubectl cordon $NDOE_NAME\n</code></pre>\n\n<h3 id=\"查看命令行工具版本\">查看命令行工具版本</h3>\n\n<p>查看<code>kubectl</code>命令行工具版本信息和kubenretes版本：</p>\n\n<pre><code class=\"language-bash\">$ kubectl version\nClient Version: version.Info{Major:\"1\", Minor:\"6\", GitVersion:\"v1.6.9+a3d1dfa6f4335\", GitCommit:\"9b77fed11a9843ce3780f70dd251e92901c43072\", GitTreeState:\"dirty\", BuildDate:\"2017-08-29T20:32:58Z\", OpenPaasKubernetesVersion:\"v1.03.02\", GoVersion:\"go1.7.5\", Compiler:\"gc\", Platform:\"linux/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"6\", GitVersion:\"v1.6.9+a3d1dfa6f4335\", GitCommit:\"9b77fed11a9843ce3780f70dd251e92901c43072\", GitTreeState:\"dirty\", BuildDate:\"2017-08-29T20:32:58Z\", OpenPaasKubernetesVersion:\"v1.03.02\", GoVersion:\"go1.7.5\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n</code></pre>\n\n<h3 id=\"查看集群服务信息\">查看集群服务信息</h3>\n\n<p>查看集群级别的服务信息：</p>\n\n<h4 id=\"kubectl-cluster-info\">kubectl cluster-info</h4>\n\n<pre><code class=\"language-bash\">$ kubectl cluster-info\nKubernetes master is running at https://108.59.85.141\nKubeDNS is running at https://108.59.85.141/api/v1/namespaces/kube-system/services/kube-dns/proxy\nKubeUI is running at https://108.59.85.141/api/v1/namespaces/kube-system/services/kube-ui/proxy\nGrafana is running at https://108.59.85.141/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy\nHeapster is running at https://108.59.85.141/api/v1/namespaces/kube-system/services/monitoring-heapster/proxy\nInfluxDB is running at https://108.59.85.141/api/v1/namespaces/kube-system/services/monitoring-influxdb/proxy\n</code></pre>\n\n<h2 id=\"参考\">参考</h2>\n\n<ul>\n  <li><a href=\"https://github.com/rootsongjc/kubernetes.github.io/blob/master/docs/user-guide/docker-cli-to-kubectl.md\">从docker到kubectl的转变</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2017-11-19"
},{
  "id": "kubernetes-tricks",
  "title": "Kubernetes tricks",
  "url": "/kubernetes-tricks",
  "category": "Kubernetes",
  "keywords": null,
  "content_html": "<h2 id=\"kubernetes-tricks\">Kubernetes tricks</h2>\n\n<h3 class=\"-three-column\" id=\"在容器中获取-pod-的ip\">在容器中获取 Pod 的IP</h3>\n\n<p>通过环境变量来实现，该环境变量直接引用 resource 的状态字段，示例如下：</p>\n\n<pre><code class=\"language-Yaml\">apiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: world-v2\nspec:\n  replicas: 3\n  selector:\n    app: world-v2\n  template:\n    metadata:\n      labels:\n        app: world-v2\n    spec:\n      containers:\n      - name: service\n        image: test\n        env:\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        ports:\n        - name: service\n          containerPort: 777\n</code></pre>\n\n<p>容器中可以直接使用 <code>POD_IP</code> 环境变量获取容器的 IP。</p>\n\n<h3 id=\"指定容器的启动参数\">指定容器的启动参数</h3>\n\n<p>我们可以在 Pod 中为容器使用 command 为容器指定启动参数：</p>\n\n<pre><code class=\"language-Bash\">command: [\"/bin/bash\",\"-c\",\"bootstrap.sh\"]\n</code></pre>\n\n<p>看似很简单，使用数组的方式定义，所有命令使用跟 Dockerfile 中的 CMD 配置是一样的，但是有一点不同的是，<code>bootsttap.sh</code> 必须具有可执行权限，否则容器启动时会出错。</p>\n\n<h3 id=\"让pod调用宿主机的docker能力\">让Pod调用宿主机的docker能力</h3>\n\n<p>我们可以想象一下这样的场景，让 Pod 来调用宿主机的 docker 能力，只需要将宿主机的 <code>docker</code> 命令和 <code>docker.sock</code> 文件挂载到 Pod 里面即可，如下：</p>\n\n<pre class=\"-file\"><code class=\"language-Yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n name: busybox-cloudbomb\nspec:\n containers:\n - image: busybox\n command:\n - /bin/sh\n - \"-c\"\n - \"while true; \\\n do \\\n docker run -d --name BOOM_$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 6) nginx ; \\\n done\"\n name: cloudbomb\n volumeMounts:\n - mountPath: /var/run/docker.sock\n name: docker-socket\n - mountPath: /bin/docker\n name: docker-binary\n volumes:\n - name: docker-socket\n hostPath:\n path: /var/run/docker.sock\n - name: docker-binary\n hostPath:\n path: /bin/docker\n</code></pre>\n\n<p>参考：<a href=\"https://www.infoq.com/presentations/patterns-microservices-kubernetes\">Architecture Patterns for Microservices in Kubernetes</a></p>\n\n<h3 id=\"使用init-container初始化应用配置\">使用Init container初始化应用配置</h3>\n\n<p>Init container可以在应用程序的容器启动前先按顺序执行一批初始化容器，只有所有Init容器都启动成功后，Pod才算启动成功。看下下面这个例子（来源：<a href=\"https://stackoverflow.com/questions/44109308/kubernetes-mounting-volume-from-within-init-container\">kubernetes: mounting volume from within init container - Stack Overflow</a>）：</p>\n\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: init\n  labels:\n    app: init\n  annotations:\n    pod.beta.kubernetes.io/init-containers: '[\n        {\n            \"name\": \"download\",\n            \"image\": \"axeclbr/git\",\n            \"command\": [\n                \"git\",\n                \"clone\",\n                \"https://github.com/mdn/beginner-html-site-scripted\",\n                \"/var/lib/data\"\n            ],\n            \"volumeMounts\": [\n                {\n                    \"mountPath\": \"/var/lib/data\",\n                    \"name\": \"git\"\n                }\n            ]\n        }\n    ]'\nspec:\n  containers:\n  - name: run\n    image: docker.io/centos/httpd\n    ports:\n      - containerPort: 80\n    volumeMounts:\n    - mountPath: /var/www/html\n      name: git\n  volumes:\n  - emptyDir: {}\n    name: git\n</code></pre>\n\n<p>这个例子就是用来再应用程序启动前首先从GitHub中拉取代码并存储到共享目录下。</p>\n\n<p>关于Init容器的更详细说明请参考 <a href=\"../concepts/init-containers.md\">init容器</a>。</p>\n\n<h3 id=\"使容器内时间与宿主机同步\">使容器内时间与宿主机同步</h3>\n\n<p>我们下载的很多容器内的时区都是格林尼治时间，与北京时间差8小时，这将导致容器内的日志和文件创建时间与实际时区不符，有两种方式解决这个问题：</p>\n\n<ul>\n  <li>修改镜像中的时区配置文件</li>\n  <li>将宿主机的时区配置文件<code>/etc/localtime</code>使用volume方式挂载到容器中</li>\n</ul>\n\n<p>第二种方式比较简单，不需要重做镜像，只要在应用的yaml文件中增加如下配置：</p>\n\n<pre><code class=\"language-yaml\">volumeMounts:\n  - name: host-time\n    mountPath: /etc/localtime\n    readOnly: true\n  volumes:\n  - name: host-time\n    hostPath:\n      path: /etc/localtime\n</code></pre>\n\n<h3 id=\"在pod中获取宿主机的主机名namespace等\">在Pod中获取宿主机的主机名、namespace等</h3>\n\n<p>这条技巧补充了第一条获取 podIP 的内容，方法都是一样的，只不过列出了更多的引用字段。</p>\n\n<p>参考下面的 pod 定义，每个 pod 里都有一个 {.spec.nodeName} 字段，通过 <code>fieldRef</code> 和环境变量，就可以在Pod中获取宿主机的主机名（访问环境变量<code>MY_NODE_NAME</code>）。</p>\n\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: busybox\n      command: [ \"/bin/sh\", \"-c\", \"env\" ]\n      env:\n        - name: MY_NODE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.nodeName\n        - name: MY_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: MY_POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: MY_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: MY_POD_SERVICE_ACCOUNT\n          valueFrom:\n            fieldRef:\n              fieldPath: spec.serviceAccountName\n  restartPolicy: Never\n</code></pre>\n<h3 id=\"配置pod使用外部dns\">配置Pod使用外部DNS</h3>\n\n<p>修改kube-dns的使用的ConfigMap。</p>\n\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kube-dns\n  namespace: kube-system\ndata:\n  stubDomains: |\n    {\"k8s.com\": [\"192.168.10.10\"]}\n  upstreamNameservers: |\n    [\"8.8.8.8\", \"8.8.4.4\"]\n</code></pre>\n\n<p><code>upstreamNameservers</code> 即使用的外部DNS，参考：<a href=\"http://blog.kubernetes.io/2017/04/configuring-private-dns-zones-upstream-nameservers-kubernetes.html\">Configuring Private DNS Zones and Upstream Nameservers in Kubernetes</a></p>\n\n<h2 id=\"参考\">参考</h2>\n\n<ul>\n  <li><a href=\"https://jimmysong.io/kubernetes-handbook\">kubernetes-handbook</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2017-11-19"
},{
  "id": "react",
  "title": "React.js",
  "url": "/react",
  "category": "React",
  "keywords": ["React.Component","render()","componentDidMount()","props/state","dangerouslySetInnerHTML"],
  "content_html": "<h2 class=\"-three-column\" id=\"components\">Components</h2>\n\n<h3 class=\"-prime\" id=\"components-1\">Components</h3>\n\n<pre class=\"-setup\"><code class=\"language-jsx\">import React from 'react'\nimport ReactDOM from 'react-dom'\n</code></pre>\n\n<pre><code class=\"language-jsx\">class Hello extends React.Component {\n  render () {\n    return &lt;div className='message-box'&gt;\n      Hello {this.props.name}\n    &lt;/div&gt;\n  }\n}\n</code></pre>\n\n<pre><code class=\"language-jsx\">const el = document.body\nReactDOM.render(&lt;Hello name='John' /&gt;, el)\n</code></pre>\n\n<p>Use the <a href=\"http://jsfiddle.net/reactjs/69z2wepo/\">React.js jsfiddle</a> to start hacking. (or the unofficial <a href=\"http://jsbin.com/yafixat/edit?js,output\">jsbin</a>)</p>\n\n<h3 id=\"properties\">Properties</h3>\n\n<pre class=\"-setup\"><code class=\"language-html\">&lt;Video fullscreen={true} /&gt;\n</code></pre>\n\n<pre data-line=\"2\"><code class=\"language-jsx\">render () {\n  this.props.fullscreen\n  ···\n}\n</code></pre>\n\n<p>Use <code>this.props</code> to access properties passed to the component.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#using-props\">Properties</a></p>\n\n<h3 id=\"states\">States</h3>\n\n<pre><code class=\"language-jsx\">this.setState({ username: 'rstacruz' })\n</code></pre>\n\n<pre data-line=\"2\"><code class=\"language-jsx\">render () {\n  this.state.username\n  ···\n}\n</code></pre>\n\n<p>Use states (<code>this.state</code>) to manage dynamic data.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/tutorial.html#reactive-state\">States</a></p>\n\n<h3 id=\"nesting\">Nesting</h3>\n\n<pre data-line=\"6,7\"><code class=\"language-jsx\">class Info extends React.Component {\n  render () {\n    const { avatar, username } = this.props\n\n    return &lt;div&gt;\n      &lt;UserAvatar src={avatar} /&gt;\n      &lt;UserProfile username={username} /&gt;\n    &lt;/div&gt;\n  }\n}\n</code></pre>\n\n<p>Nest components to separate concerns.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#composing-components\">Composing Components</a></p>\n\n<h3 id=\"children\">Children</h3>\n\n<pre data-line=\"2\"><code class=\"language-jsx\">&lt;AlertBox&gt;\n  &lt;h1&gt;You have pending notifications&lt;/h1&gt;\n&lt;/AlertBox&gt;\n</code></pre>\n\n<pre data-line=\"4\"><code class=\"language-jsx\">class AlertBox extends React.Component {\n  render () {\n    return &lt;div className='alert-box'&gt;\n      {this.props.children}\n    &lt;/div&gt;\n  }\n}\n</code></pre>\n\n<p>Children are passed as the <code>children</code> property.</p>\n\n<h2 id=\"defaults\">Defaults</h2>\n\n<h3 id=\"setting-default-props\">Setting default props</h3>\n\n<pre data-line=\"1\"><code class=\"language-jsx\">Hello.defaultProps = {\n  color: 'blue'\n}\n</code></pre>\n\n<p>See: <a href=\"https://reactjs.org/docs/react-component.html#defaultprops\">defaultProps</a></p>\n\n<h3 id=\"setting-default-state\">Setting default state</h3>\n\n<pre data-line=\"4\"><code class=\"language-jsx\">class Hello extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { visible: true }\n  }\n}\n</code></pre>\n\n<p>Set the default state in the <code>constructor()</code>.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/react-without-es6.html#setting-the-initial-state\">Setting the default state</a></p>\n\n<h2 class=\"-three-column\" id=\"other-components\">Other components</h2>\n\n<h3 id=\"function-components\">Function components</h3>\n\n<pre data-line=\"1\"><code class=\"language-jsx\">function MyComponent ({ name }) {\n  return &lt;div className='message-box'&gt;\n    Hello {name}\n  &lt;/div&gt;\n}\n</code></pre>\n\n<p>Functional components have no state. Also, their <code>props</code> are passed as the first parameter to a function.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/components-and-props.html#functional-and-class-components\">Function and Class Components</a></p>\n\n<h3 id=\"pure-components\">Pure components</h3>\n\n<pre data-line=\"1\"><code class=\"language-jsx\">class MessageBox extends React.PureComponent {\n  ···\n}\n</code></pre>\n\n<p>Performance-optimized version of <code>React.Component</code>. Doesn’t rerender if props/state hasn’t changed.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html#react.purecomponent\">Pure components</a></p>\n\n<h3 id=\"component-api\">Component API</h3>\n\n<pre><code class=\"language-jsx\">this.forceUpdate()\n</code></pre>\n\n<pre><code class=\"language-jsx\">this.setState({ ... })\n</code></pre>\n\n<pre><code class=\"language-jsx\">this.state\nthis.props\n</code></pre>\n\n<p>These methods and properties are available for <code>Component</code> instances.</p>\n\n<p>See: <a href=\"http://facebook.github.io/react/docs/component-api.html\">Component API</a></p>\n\n<h2 class=\"-two-column\" id=\"lifecycle\">Lifecycle</h2>\n\n<h3 id=\"mounting\">Mounting</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>constructor</code> <em>(props)</em></td>\n      <td>Before rendering <a href=\"https://reactjs.org/docs/react-component.html#constructor\">#</a></td>\n    </tr>\n    <tr>\n      <td><code>componentWillMount()</code></td>\n      <td><em>Don’t use this</em> <a href=\"https://reactjs.org/docs/react-component.html#componentwillmount\">#</a></td>\n    </tr>\n    <tr>\n      <td><code>render()</code></td>\n      <td>Render  <a href=\"https://reactjs.org/docs/react-component.html#render\">#</a></td>\n    </tr>\n    <tr>\n      <td><code>componentDidMount()</code></td>\n      <td>After rendering (DOM available) <a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">#</a></td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>componentWillUnmount()</code></td>\n      <td>Before DOM removal <a href=\"https://reactjs.org/docs/react-component.html#componentwillunmount\">#</a></td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr>\n      <td><code>componentDidCatch()</code></td>\n      <td>Catch errors (16+) <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">#</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Set initial the state on <code>constructor()</code>.\nAdd DOM event handlers, timers (etc) on <code>componentDidMount()</code>, then remove them on <code>componentWillUnmount()</code>.</p>\n\n<h3 id=\"updating\">Updating</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>componentWillReceiveProps</code> <em>(newProps)</em></td>\n      <td>Use <code>setState()</code> here</td>\n    </tr>\n    <tr>\n      <td><code>shouldComponentUpdate</code> <em>(newProps, newState)</em></td>\n      <td>Skips <code>render()</code> if returns false</td>\n    </tr>\n    <tr>\n      <td><code>componentWillUpdate</code> <em>(newProps, newState)</em></td>\n      <td>Can’t use <code>setState()</code> here</td>\n    </tr>\n    <tr>\n      <td><code>render()</code></td>\n      <td>Render</td>\n    </tr>\n    <tr>\n      <td><code>componentDidUpdate</code> <em>(prevProps, prevState)</em></td>\n      <td>Operate on the DOM here</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Called when parents change properties and <code>.setState()</code>. These are not called for initial renders.</p>\n\n<p>See: <a href=\"http://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\">Component specs</a></p>\n\n<h2 class=\"-two-column\" id=\"dom-nodes\">DOM nodes</h2>\n\n<h3 id=\"references\">References</h3>\n\n<pre data-line=\"4,9\"><code class=\"language-jsx\">class MyComponent extends React.Component {\n  render () {\n    return &lt;div&gt;\n      &lt;input ref={el =&gt; this.input = el} /&gt;\n    &lt;/div&gt;\n  }\n\n  componentDidMount () {\n    this.input.focus()\n  }\n}\n</code></pre>\n\n<p>Allows access to DOM nodes.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs and the DOM</a></p>\n\n<h3 id=\"dom-events\">DOM Events</h3>\n\n<pre data-line=\"5,9\"><code class=\"language-jsx\">class MyComponent extends React.Component {\n  render () {\n    &lt;input type=\"text\"\n        value={this.state.value}\n        onChange={event =&gt; this.onChange(event)} /&gt;\n  }\n\n  onChange (event) {\n    this.setState({ value: event.target.value })\n  }\n}\n</code></pre>\n\n<p>Pass functions to attributes like <code>onChange</code>.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/events.html\">Events</a></p>\n\n<h2 id=\"other-features\">Other features</h2>\n\n<h3 id=\"transferring-props\">Transferring props</h3>\n\n<pre class=\"-setup\"><code class=\"language-html\">&lt;VideoPlayer src=\"video.mp4\" /&gt;\n</code></pre>\n\n<pre data-line=\"3\"><code class=\"language-jsx\">class VideoPlayer extends React.Component {\n  render () {\n    return &lt;VideoEmbed {...this.props} /&gt;\n  }\n}\n</code></pre>\n\n<p>Propagates <code>src=\"...\"</code> down to the sub-component.</p>\n\n<p>See <a href=\"http://facebook.github.io/react/docs/transferring-props.html\">Transferring props</a></p>\n\n<h3 id=\"top-level-api\">Top-level API</h3>\n\n<pre><code class=\"language-jsx\">React.createClass({ ... })\nReact.isValidElement(c)\n</code></pre>\n\n<pre><code class=\"language-jsx\">ReactDOM.render(&lt;Component /&gt;, domnode, [callback])\nReactDOM.unmountComponentAtNode(domnode)\n</code></pre>\n\n<pre><code class=\"language-jsx\">ReactDOMServer.renderToString(&lt;Component /&gt;)\nReactDOMServer.renderToStaticMarkup(&lt;Component /&gt;)\n</code></pre>\n\n<p>There are more, but these are most common.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/react-api.html\">React top-level API</a></p>\n\n<h2 class=\"-two-column\" id=\"jsx-patterns\">JSX patterns</h2>\n\n<h3 id=\"style-shorthand\">Style shorthand</h3>\n\n<pre><code class=\"language-jsx\">var style = { height: 10 }\nreturn &lt;div style={style}&gt;&lt;/div&gt;\n</code></pre>\n\n<pre><code class=\"language-jsx\">return &lt;div style={{ margin: 0, padding: 0 }}&gt;&lt;/div&gt;\n</code></pre>\n\n<p>See: <a href=\"https://reactjs.org/tips/inline-styles.html\">Inline styles</a></p>\n\n<h3 id=\"inner-html\">Inner HTML</h3>\n\n<pre><code class=\"language-jsx\">function markdownify() { return \"&lt;p&gt;...&lt;/p&gt;\"; }\n&lt;div dangerouslySetInnerHTML={{__html: markdownify()}} /&gt;\n</code></pre>\n\n<p>See: <a href=\"https://reactjs.org/tips/dangerously-set-inner-html.html\">Dangerously set innerHTML</a></p>\n\n<h3 id=\"lists\">Lists</h3>\n\n<pre data-line=\"6,7\"><code class=\"language-jsx\">class TodoList extends React.Component {\n  render () {\n    const { items } = this.props\n\n    return &lt;ul&gt;\n      {items.map(item =&gt;\n        &lt;TodoItem item={item} key={item.key} /&gt;)}\n    &lt;/ul&gt;\n  }\n}\n</code></pre>\n\n<p>Always supply a <code>key</code> property.</p>\n\n<h3 id=\"conditionals\">Conditionals</h3>\n\n<pre><code class=\"language-jsx\">&lt;div&gt;\n  {showMyComponent\n    ? &lt;MyComponent /&gt;\n    : &lt;OtherComponent /&gt;}\n&lt;/div&gt;\n</code></pre>\n\n<h3 id=\"short-circuit-evaluation\">Short-circuit evaluation</h3>\n\n<pre><code class=\"language-jsx\">&lt;div&gt;\n  {showPopup &amp;&amp; &lt;Popup /&gt;}\n&lt;/div&gt;\n</code></pre>\n\n<h2 class=\"-three-column\" id=\"new-features\">New features</h2>\n\n<h3 id=\"returning-fragments\">Returning fragments</h3>\n\n<pre data-line=\"3,4,5,6\"><code class=\"language-js\">render () {\n  // Don't forget the keys!\n  return [\n    &lt;li key=\"A\"&gt;First item&lt;/li&gt;,\n    &lt;li key=\"B\"&gt;Second item&lt;/li&gt;\n  ]\n}\n</code></pre>\n\n<p>You can return multiple nodes as arrays.</p>\n\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n\n<h3 id=\"returning-strings\">Returning strings</h3>\n\n<pre data-line=\"2\"><code class=\"language-js\">render() {\n  return 'Look ma, no spans!';\n}\n</code></pre>\n\n<p>You can return just a string.</p>\n\n<p>See: <a href=\"https://reactjs.org/blog/2017/09/26/react-v16.0.html#new-render-return-types-fragments-and-strings\">Fragments and strings</a></p>\n\n<h3 id=\"errors\">Errors</h3>\n\n<pre data-line=\"3,4,5\"><code class=\"language-js\">class MyComponent extends React.Component {\n  ···\n  componentDidCatch (error, info) {\n    this.setState({ error })\n  }\n}\n</code></pre>\n\n<p>Catch errors via <code>componentDidCatch</code>. (React 16+)</p>\n\n<p>See: <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\">Error handling in React 16</a></p>\n\n<h3 id=\"portals\">Portals</h3>\n\n<pre data-line=\"2,3,4,5\"><code class=\"language-js\">render () {\n  return React.createPortal(\n    this.props.children,\n    document.getElementById('menu')\n  )\n}\n</code></pre>\n\n<p>This renders <code>this.props.children</code> into any location in the DOM.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/portals.html\">Portals</a></p>\n\n<h3 id=\"hydration\">Hydration</h3>\n\n<pre data-line=\"2\"><code class=\"language-js\">const el = document.getElementById('app')\nReactDOM.hydrate(&lt;App /&gt;, el)\n</code></pre>\n\n<p>Use <code>ReactDOM.hydrate</code> instead of using <code>ReactDOM.render</code> if you’re rendering over the output of <a href=\"https://reactjs.org/docs/react-dom-server.html\">ReactDOMServer</a>.</p>\n\n<p>See: <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">Hydrate</a></p>\n\n<h2 class=\"-three-column\" id=\"property-validation\">Property validation</h2>\n\n<h3 id=\"proptypes\">PropTypes</h3>\n\n<pre class=\"-setup\"><code class=\"language-js\">import PropTypes from 'prop-types'\n</code></pre>\n\n<p>See: <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">Typechecking with PropTypes</a></p>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>any</code></td>\n      <td>Anything</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"basic\">Basic</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>string</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>number</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>func</code></td>\n      <td>Function</td>\n    </tr>\n    <tr>\n      <td><code>bool</code></td>\n      <td>True or false</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"enum\">Enum</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>oneOf</code><em>(any)</em></td>\n      <td>Enum types</td>\n    </tr>\n    <tr>\n      <td><code>oneOfType</code><em>(type array)</em></td>\n      <td>Union</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"array\">Array</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>array</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>arrayOf</code><em>(…)</em></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"object\">Object</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>object</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>objectOf</code><em>(…)</em></td>\n      <td>Object with values of a certain type</td>\n    </tr>\n    <tr>\n      <td><code>instanceOf</code><em>(…)</em></td>\n      <td>Instance of a class</td>\n    </tr>\n    <tr>\n      <td><code>shape</code><em>(…)</em></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"elements\">Elements</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>element</code></td>\n      <td>React element</td>\n    </tr>\n    <tr>\n      <td><code>node</code></td>\n      <td>DOM node</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"required\">Required</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>(···).isRequired</code></td>\n      <td>Required</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"basic-types\">Basic types</h3>\n\n<pre><code class=\"language-jsx\">MyComponent.propTypes = {\n  email:      PropTypes.string,\n  seats:      PropTypes.number,\n  callback:   PropTypes.func,\n  isClosed:   PropTypes.bool,\n  any:        PropTypes.any\n}\n</code></pre>\n\n<h3 id=\"required-types\">Required types</h3>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  name:  PropTypes.string.isRequired\n}\n</code></pre>\n\n<h3 id=\"elements-1\">Elements</h3>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  // React element\n  element: PropTypes.element,\n\n  // num, string, element, or an array of those\n  node: PropTypes.node\n}\n</code></pre>\n\n<h3 id=\"enumerables-oneof\">Enumerables (oneOf)</h3>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  direction: PropTypes.oneOf([\n    'left', 'right'\n  ])\n}\n</code></pre>\n\n<h3 id=\"arrays-and-objects\">Arrays and objects</h3>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  list: PropTypes.array,\n  ages: PropTypes.arrayOf(PropTypes.number),\n  user: PropTypes.object,\n  user: PropTypes.objectOf(PropTypes.number),\n  message: PropTypes.instanceOf(Message)\n}\n</code></pre>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    age:  PropTypes.number\n  })\n}\n</code></pre>\n\n<p>Use <code>.array[Of]</code>, <code>.object[Of]</code>, <code>.instanceOf</code>, <code>.shape</code>.</p>\n\n<h3 id=\"custom-validation\">Custom validation</h3>\n\n<pre><code class=\"language-jsx\">MyCo.propTypes = {\n  customProp: (props, key, componentName) =&gt; {\n    if (!/matchme/.test(props[key])) {\n      return new Error('Validation failed!')\n    }\n  }\n}\n</code></pre>\n\n<h2 id=\"also-see\">Also see</h2>\n\n<ul>\n  <li><a href=\"https://reactjs.org\">React website</a> <em>(reactjs.org)</em></li>\n  <li><a href=\"https://reactcheatsheet.com/\">React cheatsheet</a> <em>(reactcheatsheet.com)</em></li>\n  <li><a href=\"https://github.com/enaqx/awesome-react\">Awesome React</a> <em>(github.com)</em></li>\n  <li><a href=\"react@0.14\">React v0.14 cheatsheet</a> <em>Legacy version</em></li>\n</ul>",
  "intro_html": "<p><a href=\"https://reactjs.org/\">React</a> is a JavaScript library for building user interfaces. This guide targets React v15 to v16.</p>",
  "description_html": "",
  "tags": ["Featured"],
  "updated": "2017-10-10"
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

